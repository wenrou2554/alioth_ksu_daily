name: Build MIUI Kernel for Alioth

on: 
  schedule:
    - cron:  '20 22 * * 1,3,5'
  workflow_dispatch:

  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Kernel Source Code
      uses: actions/checkout@v3
      with:
        github-server-url: 'https://github.com'
        repository: LeviMarvin/kernel_xiaomi_alioth
        ref: talon
        path: android-kernel
      
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig python-is-python3 python2 cpio p7zip-full
    
    - name: Download Clang Toolchain
      run: |
        mkdir clang
        cd clang
        wget -q https://github.com/Mandi-Sa/clang/releases/download/amd64-kernel-arm-20230213/amd64-kernel-arm-20230213.7z -O clang.7z
        7za x clang.7z
        CLANG_DIR=`pwd`
        echo "CLANG_DIR=$CLANG_DIR" >> $GITHUB_ENV
      
    - name: Setup KernelSU
      run: |
        cd android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
        wget -q "https://raw.githubusercontent.com/CapShift/alioth_ksu_daily/main/0001-Add-KernelSU-calls-to-the-kernel-source.patch" -O KernelSU.patch
        git apply ./KernelSU.patch
    
    - name: Generate Kernel Configuration
      run: |
        cd android-kernel
        PATH=${{ env.CLANG_DIR }}/bin:$PATH
        CapShift/alioth_ksu_daily/=Alioth
        KERNEL_DEFCONFIG=vendor/alioth_defconfig
        KERNEL_DIR=`pwd`
        echo "KERNEL_DIR=${KERNEL_DIR}" >> $GITHUB_ENV
        echo "ZIMAGE_DIR="${KERNEL_DIR}/out/arch/arm64/boot"" >> $GITHUB_ENV
        ARCH=arm64
        SUBARCH=arm64
        KBUILD_COMPILER_STRING="$(clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"
        KBUILD_BUILD_HOST=GitHub-Action
        KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        ######################
        cd $KERNEL_DIR/KernelSU
        KSU_VERSION=$((10000+200+`git rev-list --count HEAD`))
        cd $KERNEL_DIR
        ######################
        make CC=clang O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_COMPAT=arm-linux-gnueabi- NM=llvm-nm OBJDUMP=llvm-objdump STRIP=llvm-strip $KERNEL_DEFCONFIG 
        ######################
        sed -i "/lmperf/{s/-/-${KSU_VERSION}-/}" out/.config
        sed -i "/RealKing/{s/RealKing/RK-KSU/}" out/.config
        KERNEL_NAME=`grep "RK-KSU" out/.config | sed 's|//|-|' | awk -F\" '{print $2}'`
        
        echo "ZIMAGE_NAME=${KERNEL_NAME}-${DEVICE_NAME}-MIUI-Snapshot" >> $GITHUB_ENV
        
        
    - name: Build Kernel
      run: |
        cd android-kernel
        PATH=${{ env.CLANG_DIR }}/bin:$PATH
        clang -v
        #MAKE="./makeparallel"
        SUBARCH=arm64
        KBUILD_COMPILER_STRING="$(clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"
        KBUILD_BUILD_HOST=GitHub-Action
        KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)       
        make -j$(nproc --all) CC=clang O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_COMPAT=arm-linux-gnueabi- NM=llvm-nm OBJDUMP=llvm-objdump STRIP=llvm-strip 
  
    - name: ZIP Kernel
      run: |
        mkdir image_output
        cd android-kernel
        TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")
        mkdir -p tmp
        cp -fp ${{ env.ZIMAGE_DIR }}/Image.gz tmp
        cp -fp ${{ env.ZIMAGE_DIR }}/dtbo.img tmp
        cp -rp ./anykernel/* tmp
        cd tmp
        7za a -mx9 tmp.zip *
        cd ..
        echo "FINAL_ZINAME="${{ env.ZIMAGE_NAME }}-${TIME}"" >> $GITHUB_ENV
        FINAL_ZINAME="${{ env.ZIMAGE_NAME }}-${TIME}"
        mkdir ${{ env.KERNEL_DIR }}/image_output
        cp -fp tmp/tmp.zip ../image_output/${FINAL_ZINAME}.zip
        md5sum ../image_output/${FINAL_ZINAME}.zip >../image_output/${FINAL_ZINAME}.zip.md5sum
        rm -rf out
        
    - name: Upload Kernel Image ZIP
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.FINAL_ZINAME }}
        path: image_output/*
        

    
          
