name: Build MIUI Kernel for Alioth

on: 
  schedule:
    - cron:  '20 22 * * 1,3,5'
  workflow_dispatch:

  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Kernel Source Code
      uses: actions/checkout@v3
      with:
        github-server-url: 'https://github.com'
        repository: LeviMarvin/kernel_xiaomi_alioth
        ref: talon
        path: android-kernel

    - name: Setup Environment
      run: |
        LOCAL_DIR=`pwd`

        echo "LOCAL_DIR=${LOCAL_DIR}" >> $GITHUB_ENV
        echo "CLANG_DIR=${LOCAL_DIR}/clang" >> $GITHUB_ENV
        echo "KERNEL_DIR=${LOCAL_DIR}/android-kernel" >> $GITHUB_ENV
        echo "ZIMAGE_DIR="${LOCAL_DIR}/android-kernel/out/arch/arm64/boot"" >> $GITHUB_ENV


    - name: Setup KernelSU
      run: |
        cd ${{ env.KERNEL_DIR }}
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
        wget -q "https://raw.githubusercontent.com/CapShift/alioth_ksu_daily/main/0001-Add-KernelSU-calls-to-the-kernel-source.patch" -O KernelSU.patch
        git apply KernelSU.patch
        KSU_VERSION=$((10000+200+`git rev-list --count HEAD`))
        echo "KSU_VERSION=${KSU_VERSION}" >> $GITHUB_ENV
        cd ${{ env.LOCAL_DIR }}


    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig python-is-python3 python2 cpio p7zip-full


    - name: Download Clang Toolchain
      run: |
        [[ -d ${{ env.CLANG_DIR }} ]] || mkdir ${{ env.CLANG_DIR }}
        cd ${{ env.CLANG_DIR }}
        wget -q https://github.com/Mandi-Sa/clang/releases/download/amd64-kernel-arm-20230213/amd64-kernel-arm-20230213.7z -O clang.7z
        7za x clang.7z && rm -rf clang.7z
        cd ${{ env.LOCAL_DIR }}


    - name: Generate Kernel Configuration
      run: | 
        PATH=${{ env.CLANG_DIR }}/bin:$PATH
        ARCH=arm64
        SUBARCH=arm64
        KERNEL_DEFCONFIG=alioth_lmperf_defconfig

        KBUILD_COMPILER_STRING="$(clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"
        KBUILD_BUILD_HOST=GitHub-Action
        KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)

        ######################
        cd ${{ env.KERNEL_DIR }}
        ######################
        make CC=clang O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_COMPAT=arm-linux-gnueabi- NM=llvm-nm OBJDUMP=llvm-objdump STRIP=llvm-strip $KERNEL_DEFCONFIG 
        ######################
        make -j$(nproc --all) CC=clang O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_COMPAT=arm-linux-gnueabi- NM=llvm-nm OBJDUMP=llvm-objdump STRIP=llvm-strip 
        ######################
        cd ${{ env.LOCAL_DIR }}


    - name: ZIP Kernel
      run: |
        TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")
        echo "FINAL_ZIPNAME="AliothKernel_KernelSU_${{ env.KSU_VERSION }}_${TIME}"" >> $GITHUB_ENV
        FINAL_ZIPNAME="AliothKernel_KernelSU_${{ env.KSU_VERSION }}_${TIME}"

        cd ${{ env.KERNEL_DIR }}
        mkdir -p tmp
        cp -fp ${{ env.ZIMAGE_DIR }}/Image tmp/
        cp -fp ${{ env.ZIMAGE_DIR }}/dtbo.img tmp/
        cd tmp
        7za a -mx9 ${FINAL_ZIPNAME}.zip *
        cd ${{ env.LOCAL_DIR }}


    - name: Upload Kernel Image Zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.FINAL_ZIPNAME }}
        path: ${{ env.KERNEL_DIR }}/tmp/*
